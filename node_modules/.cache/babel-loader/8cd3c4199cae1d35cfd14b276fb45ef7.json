{"ast":null,"code":"// if (process.browser){\n// window.onload = function(){\n// var SETTINGSStore = {\n//     navBarTravellingStore: false,\n//     navBarTravelDirectionStore: \"\",\n//     navBarTravelDistanceStore: 250\n// }\n// var coloursStore = {\n//     0: \"#867100\",\n//     1: \"#7F4200\",\n//     2: \"#99813D\",\n//     3: \"#40FEFF\",\n//     4: \"#14CC99\",\n//     5: \"#00BAFF\",\n//     6: \"#0082B2\",\n//     7: \"#B25D7A\",\n//     8: \"#00FF17\",\n//     9: \"#006B49\",\n//     10: \"#00B27A\",\n//     11: \"#996B3D\",\n//     12: \"#CC7014\",\n//     13: \"#40FF8C\",\n//     14: \"#FF3400\",\n//     15: \"#ECBB5E\",\n//     16: \"#ECBB0C\",\n//     17: \"#B9D912\",\n//     18: \"#253A93\",\n//     19: \"#125FB9\",\n// }\n// document.documentElement.classList.remove(\"no-js\");\n// document.documentElement.classList.add(\"js\");\n// console.log('lion2');\n// // Out advancer buttons\n// var pnAdvancerLeftStore = document.getElementById(\"pnAdvancerLeftStore\");\n// var pnAdvancerRightStore = document.getElementById(\"pnAdvancerRightStore\");\n// // the indicator\n// var pnIndicatorStore = document.getElementById(\"pnIndicatorStore\");\n// var pnProductNavStore = document.getElementById(\"pnProductNavStore\");\n// var pnProductNavContentsStore = document.getElementById(\"pnProductNavContentsStore\");\n// pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// // Set the indicator\n// moveIndicatorStore(pnProductNavStore.querySelector(\"[aria-selected=\\\"true\\\"]\"), coloursStore[0]);\n// // Handle the scroll of the horizontal container\n// var last_known_scroll_positionStore = 0;\n// var tickingStore = false;\n// function doSomethingStore(scroll_pos) {\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// }\n// pnProductNavStore.addEventListener(\"scroll\", function() {\n//     last_known_scroll_positionStore = window.scrollY;\n//     if (!tickingStore) {\n//         window.requestAnimationFrame(function() {\n//             doSomethingStore(last_known_scroll_positionStore);\n//             tickingStore = false;\n//         });\n//     }\n//     tickingStore = true;\n// });\n// pnAdvancerLeftStore.addEventListener(\"click\", function() {\n//     // If in the middle of a move return\n//     if (SETTINGSStore.navBarTravellingStore === true) {\n//         return;\n//     }\n//     // If we have content overflowing both sides or on the left\n//     if (determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"left\" || determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"both\") {\n//         // Find how far this panel has been scrolled\n//         var availableScrollLeftStore = pnProductNavStore.scrollLeft;\n//         // If the space available is less than two lots of our desired distance, just move the whole amount\n//         // otherwise, move by the amount in the settingsStore\n//         if (availableScrollLeftStore < SETTINGSStore.navBarTravelDistanceStore * 2) {\n//             pnProductNavContentsStore.style.transform = \"translateX(\" + availableScrollLeftStore + \"px)\";\n//         } else {\n//             pnProductNavContentsStore.style.transform = \"translateX(\" + SETTINGSStore.navBarTravelDistanceStore + \"px)\";\n//         }\n//         // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n//         pnProductNavContentsStore.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n//         // Update our settingsStore\n//         SETTINGSStore.navBarTravelDirectionStore = \"left\";\n//         SETTINGSStore.navBarTravellingStore = true;\n//     }\n//     // Now update the attribute in the DOM\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// });\n// pnAdvancerRightStore.addEventListener(\"click\", function() {\n//     // If in the middle of a move return\n//     if (SETTINGSStore.navBarTravellingStore === true) {\n//         return;\n//     }\n//     // If we have content overflowing both sides or on the right\n//     if (determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"right\" || determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"both\") {\n//         // Get the right edge of the container and content\n//         var navBarRightEdgeStore = pnProductNavContentsStore.getBoundingClientRect().right;\n//         var navBarScrollerRightEdgeStore = pnProductNavStore.getBoundingClientRect().right;\n//         // Now we know how much space we have available to scroll\n//         var availableScrollRightStore = Math.floor(navBarRightEdgeStore - navBarScrollerRightEdgeStore);\n//         // If the space available is less than two lots of our desired distance, just move the whole amount\n//         // otherwise, move by the amount in the settingsStore\n//         if (availableScrollRightStore < SETTINGSStore.navBarTravelDistanceStore * 2) {\n//             pnProductNavContentsStore.style.transform = \"translateX(-\" + availableScrollRightStore + \"px)\";\n//         } else {\n//             pnProductNavContentsStore.style.transform = \"translateX(-\" + SETTINGSStore.navBarTravelDistanceStore + \"px)\";\n//         }\n//         // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n//         pnProductNavContentsStore.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n//         // Update our settingsStore\n//         SETTINGSStore.navBarTravelDirectionStore = \"right\";\n//         SETTINGSStore.navBarTravellingStore = true;\n//     }\n//     // Now update the attribute in the DOM\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// });\n// pnProductNavContentsStore.addEventListener(\n//     \"transitionend\",\n//     function() {\n//         // get the value of the transform, apply that to the current scroll position (so get the scroll pos first) and then remove the transform\n//         var styleOfTransformStore = window.getComputedStyle(pnProductNavContentsStore, null);\n//         var trStore = styleOfTransformStore.getPropertyValue(\"-webkit-transform\") || styleOfTransformStore.getPropertyValue(\"transform\");\n//         // If there is no transition we want to default to 0 and not null\n//         var amountStore = Math.abs(parseInt(trStore.split(\",\")[4]) || 0);\n//         pnProductNavContentsStore.style.transform = \"none\";\n//         pnProductNavContentsStore.classList.add(\"pn-ProductNav_Contents-no-transition\");\n//         // Now lets set the scroll position\n//         if (SETTINGSStore.navBarTravelDirectionStore === \"left\") {\n//             pnProductNavStore.scrollLeft = pnProductNavStore.scrollLeft - amountStore;\n//         } else {\n//             pnProductNavStore.scrollLeft = pnProductNavStore.scrollLeft + amountStore;\n//         }\n//         SETTINGSStore.navBarTravellingStore = false;\n//     },\n//     false\n// );\n// // Handle setting the currently active link\n// pnProductNavContentsStore.addEventListener(\"click\", function(e) {\n//     var linksStore = [].slice.call(document.querySelectorAll(\".pn-ProductNav_LinkStore\"));\n//     linksStore.forEach(function(item) {\n//         item.setAttribute(\"aria-selected\", \"false\");\n//     })\n//     e.target.setAttribute(\"aria-selected\", \"true\");\n//     // Pass the clicked item and it's colour to the move indicator function\n//     moveIndicatorStore(e.target, coloursStore[linksStore.indexOf(e.target)]);\n// });\n// // var count = 0;\n// function moveIndicatorStore(item, color) {\n//     var textPosition = item.getBoundingClientRect();\n//     var container = pnProductNavContentsStore.getBoundingClientRect().left;\n//     var distance = textPosition.left - container;\n//      var scroll = pnProductNavContentsStore.scrollLeft;\n//     pnIndicatorStore.style.transform = \"translateX(\" + (distance + scroll) + \"px) scaleX(\" + textPosition.width * 0.01 + \")\";\n//     // count = count += 100;\n//     // pnIndicator.style.transform = \"translateX(\" + count + \"px)\";\n//     if (color) {\n//         pnIndicatorStore.style.backgroundColor = color;\n//     }\n// }\n// function determineOverflowStore(content, container) {\n//     var containerMetrics = container.getBoundingClientRect();\n//     var containerMetricsRight = Math.floor(containerMetrics.right);\n//     var containerMetricsLeft = Math.floor(containerMetrics.left);\n//     var contentMetrics = content.getBoundingClientRect();\n//     var contentMetricsRight = Math.floor(contentMetrics.right);\n//     var contentMetricsLeft = Math.floor(contentMetrics.left);\n//      if (containerMetricsLeft > contentMetricsLeft && containerMetricsRight < contentMetricsRight) {\n//         return \"both\";\n//     } else if (contentMetricsLeft < containerMetricsLeft) {\n//         return \"left\";\n//     } else if (contentMetricsRight > containerMetricsRight) {\n//         return \"right\";\n//     } else {\n//         return \"none\";\n//     }\n// }\n// /**\n//  * @fileoverview dragscroll - scroll area by dragging\n//  * @version 0.0.8\n//  * \n//  * @license MIT, see https://github.com/asvd/dragscroll\n//  * @copyright 2015 asvd <heliosframework@gmail.com> \n//  */\n// (function (root, factory) {\n//     if (typeof define === 'function' && define.amd) {\n//         define(['exports'], factory);\n//     } else if (typeof exports !== 'undefined') {\n//         factory(exports);\n//     } else {\n//         factory((root.dragscroll = {}));\n//     }\n// }(this, function (exports) {\n//     var _windowStore = window;\n//     var _documentStore = document;\n//     var mousemoveStore = 'mousemove';\n//     var mouseupStore  = 'mouseup';\n//     var mousedownStore  = 'mousedown';\n//     var EventListenerStore = 'EventListener';\n//     var addEventListenerStore  = 'add'+EventListenerStore;\n//     var removeEventListenerStore  = 'remove'+EventListenerStore;\n//     var newScrollXStore, newScrollYStore;\n//     var dragged = [];\n//     var resetStore = function(i, el) {\n//         for (i = 0; i < dragged.length;) {\n//             el = dragged[i++];\n//             el = el.container || el;\n//             el[removeEventListenerStore ](mousedownStore , el.md, 0);\n//             _windowStore[removeEventListenerStore ](mouseupStore , el.mu, 0);\n//             _windowStore[removeEventListenerStore ](mousemoveStore , el.mm, 0);\n//         }\n//         // cloning into array since HTMLCollection is updated dynamically\n//         dragged = [].slice.call(_documentStore.getElementsByClassName('dragscroll'));\n//         for (i = 0; i < dragged.length;) {\n//             (function(el, lastClientX, lastClientY, pushed, scroller, cont){\n//                 (cont = el.container || el)[addEventListenerStore ](\n//                     mousedownStore ,\n//                     cont.md = function(e) {\n//                         if (!el.hasAttribute('nochilddrag') ||\n//                             _documentStore.elementFromPoint(\n//                                 e.pageX, e.pageY\n//                             ) == cont\n//                         ) {\n//                             pushed = 1;\n//                             lastClientX = e.clientX;\n//                             lastClientY = e.clientY;\n//                             e.preventDefault();\n//                         }\n//                     }, 0\n//                 );\n//                 _windowStore[addEventListenerStore ](\n//                     mouseupStore , cont.mu = function() {pushed = 0;}, 0\n//                 );\n//                 _windowStore[addEventListenerStore ](\n//                     mousemoveStore ,\n//                     cont.mm = function(e) {\n//                         if (pushed) {\n//                             (scroller = el.scroller||el).scrollLeft -=\n//                                 newScrollXStore = (- lastClientX + (lastClientX=e.clientX));\n//                             scroller.scrollTop -=\n//                                 newScrollYStore = (- lastClientY + (lastClientY=e.clientY));\n//                             if (el == _documentStore.body) {\n//                                 (scroller = _documentStore.documentElement).scrollLeft -= newScrollXStore;\n//                                 scroller.scrollTop -= newScrollYStore;\n//                             }\n//                         }\n//                     }, 0\n//                 );\n//              })(dragged[i++]);\n//         }\n//     }\n//     if (_documentStore.readyState == 'complete') {\n//         resetStore();\n//     } else {\n//         _windowStore[addEventListenerStore ]('load', resetStore, 0);\n//     }\n//     exports.resetStore = resetStore;\n// }));\n// }\n// }","map":{"version":3,"sources":["/Users/peterhahn/src/new/audio-boy-mock/scrollStore.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// if (process.browser){\n// window.onload = function(){\n\n// var SETTINGSStore = {\n//     navBarTravellingStore: false,\n//     navBarTravelDirectionStore: \"\",\n//     navBarTravelDistanceStore: 250\n// }\n\n// var coloursStore = {\n//     0: \"#867100\",\n//     1: \"#7F4200\",\n//     2: \"#99813D\",\n//     3: \"#40FEFF\",\n//     4: \"#14CC99\",\n//     5: \"#00BAFF\",\n//     6: \"#0082B2\",\n//     7: \"#B25D7A\",\n//     8: \"#00FF17\",\n//     9: \"#006B49\",\n//     10: \"#00B27A\",\n//     11: \"#996B3D\",\n//     12: \"#CC7014\",\n//     13: \"#40FF8C\",\n//     14: \"#FF3400\",\n//     15: \"#ECBB5E\",\n//     16: \"#ECBB0C\",\n//     17: \"#B9D912\",\n//     18: \"#253A93\",\n//     19: \"#125FB9\",\n// }\n\n// document.documentElement.classList.remove(\"no-js\");\n// document.documentElement.classList.add(\"js\");\n// console.log('lion2');\n// // Out advancer buttons\n// var pnAdvancerLeftStore = document.getElementById(\"pnAdvancerLeftStore\");\n// var pnAdvancerRightStore = document.getElementById(\"pnAdvancerRightStore\");\n// // the indicator\n// var pnIndicatorStore = document.getElementById(\"pnIndicatorStore\");\n\n// var pnProductNavStore = document.getElementById(\"pnProductNavStore\");\n// var pnProductNavContentsStore = document.getElementById(\"pnProductNavContentsStore\");\n\n// pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n\n// // Set the indicator\n// moveIndicatorStore(pnProductNavStore.querySelector(\"[aria-selected=\\\"true\\\"]\"), coloursStore[0]);\n\n// // Handle the scroll of the horizontal container\n// var last_known_scroll_positionStore = 0;\n// var tickingStore = false;\n\n// function doSomethingStore(scroll_pos) {\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// }\n\n// pnProductNavStore.addEventListener(\"scroll\", function() {\n//     last_known_scroll_positionStore = window.scrollY;\n//     if (!tickingStore) {\n//         window.requestAnimationFrame(function() {\n//             doSomethingStore(last_known_scroll_positionStore);\n//             tickingStore = false;\n//         });\n//     }\n//     tickingStore = true;\n// });\n\n\n// pnAdvancerLeftStore.addEventListener(\"click\", function() {\n//     // If in the middle of a move return\n//     if (SETTINGSStore.navBarTravellingStore === true) {\n//         return;\n//     }\n//     // If we have content overflowing both sides or on the left\n//     if (determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"left\" || determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"both\") {\n//         // Find how far this panel has been scrolled\n//         var availableScrollLeftStore = pnProductNavStore.scrollLeft;\n//         // If the space available is less than two lots of our desired distance, just move the whole amount\n//         // otherwise, move by the amount in the settingsStore\n//         if (availableScrollLeftStore < SETTINGSStore.navBarTravelDistanceStore * 2) {\n//             pnProductNavContentsStore.style.transform = \"translateX(\" + availableScrollLeftStore + \"px)\";\n//         } else {\n//             pnProductNavContentsStore.style.transform = \"translateX(\" + SETTINGSStore.navBarTravelDistanceStore + \"px)\";\n//         }\n//         // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n//         pnProductNavContentsStore.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n//         // Update our settingsStore\n//         SETTINGSStore.navBarTravelDirectionStore = \"left\";\n//         SETTINGSStore.navBarTravellingStore = true;\n//     }\n//     // Now update the attribute in the DOM\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// });\n\n// pnAdvancerRightStore.addEventListener(\"click\", function() {\n//     // If in the middle of a move return\n//     if (SETTINGSStore.navBarTravellingStore === true) {\n//         return;\n//     }\n//     // If we have content overflowing both sides or on the right\n//     if (determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"right\" || determineOverflowStore(pnProductNavContentsStore, pnProductNavStore) === \"both\") {\n//         // Get the right edge of the container and content\n//         var navBarRightEdgeStore = pnProductNavContentsStore.getBoundingClientRect().right;\n//         var navBarScrollerRightEdgeStore = pnProductNavStore.getBoundingClientRect().right;\n//         // Now we know how much space we have available to scroll\n//         var availableScrollRightStore = Math.floor(navBarRightEdgeStore - navBarScrollerRightEdgeStore);\n//         // If the space available is less than two lots of our desired distance, just move the whole amount\n//         // otherwise, move by the amount in the settingsStore\n//         if (availableScrollRightStore < SETTINGSStore.navBarTravelDistanceStore * 2) {\n//             pnProductNavContentsStore.style.transform = \"translateX(-\" + availableScrollRightStore + \"px)\";\n//         } else {\n//             pnProductNavContentsStore.style.transform = \"translateX(-\" + SETTINGSStore.navBarTravelDistanceStore + \"px)\";\n//         }\n//         // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n//         pnProductNavContentsStore.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n//         // Update our settingsStore\n//         SETTINGSStore.navBarTravelDirectionStore = \"right\";\n//         SETTINGSStore.navBarTravellingStore = true;\n//     }\n//     // Now update the attribute in the DOM\n//     pnProductNavStore.setAttribute(\"data-overflowing\", determineOverflowStore(pnProductNavContentsStore, pnProductNavStore));\n// });\n\n// pnProductNavContentsStore.addEventListener(\n//     \"transitionend\",\n//     function() {\n//         // get the value of the transform, apply that to the current scroll position (so get the scroll pos first) and then remove the transform\n//         var styleOfTransformStore = window.getComputedStyle(pnProductNavContentsStore, null);\n//         var trStore = styleOfTransformStore.getPropertyValue(\"-webkit-transform\") || styleOfTransformStore.getPropertyValue(\"transform\");\n//         // If there is no transition we want to default to 0 and not null\n//         var amountStore = Math.abs(parseInt(trStore.split(\",\")[4]) || 0);\n//         pnProductNavContentsStore.style.transform = \"none\";\n//         pnProductNavContentsStore.classList.add(\"pn-ProductNav_Contents-no-transition\");\n//         // Now lets set the scroll position\n//         if (SETTINGSStore.navBarTravelDirectionStore === \"left\") {\n//             pnProductNavStore.scrollLeft = pnProductNavStore.scrollLeft - amountStore;\n//         } else {\n//             pnProductNavStore.scrollLeft = pnProductNavStore.scrollLeft + amountStore;\n//         }\n//         SETTINGSStore.navBarTravellingStore = false;\n//     },\n//     false\n// );\n\n// // Handle setting the currently active link\n// pnProductNavContentsStore.addEventListener(\"click\", function(e) {\n//     var linksStore = [].slice.call(document.querySelectorAll(\".pn-ProductNav_LinkStore\"));\n//     linksStore.forEach(function(item) {\n//         item.setAttribute(\"aria-selected\", \"false\");\n//     })\n//     e.target.setAttribute(\"aria-selected\", \"true\");\n//     // Pass the clicked item and it's colour to the move indicator function\n//     moveIndicatorStore(e.target, coloursStore[linksStore.indexOf(e.target)]);\n// });\n\n// // var count = 0;\n// function moveIndicatorStore(item, color) {\n//     var textPosition = item.getBoundingClientRect();\n//     var container = pnProductNavContentsStore.getBoundingClientRect().left;\n//     var distance = textPosition.left - container;\n//      var scroll = pnProductNavContentsStore.scrollLeft;\n//     pnIndicatorStore.style.transform = \"translateX(\" + (distance + scroll) + \"px) scaleX(\" + textPosition.width * 0.01 + \")\";\n//     // count = count += 100;\n//     // pnIndicator.style.transform = \"translateX(\" + count + \"px)\";\n    \n//     if (color) {\n//         pnIndicatorStore.style.backgroundColor = color;\n//     }\n// }\n\n// function determineOverflowStore(content, container) {\n//     var containerMetrics = container.getBoundingClientRect();\n//     var containerMetricsRight = Math.floor(containerMetrics.right);\n//     var containerMetricsLeft = Math.floor(containerMetrics.left);\n//     var contentMetrics = content.getBoundingClientRect();\n//     var contentMetricsRight = Math.floor(contentMetrics.right);\n//     var contentMetricsLeft = Math.floor(contentMetrics.left);\n//      if (containerMetricsLeft > contentMetricsLeft && containerMetricsRight < contentMetricsRight) {\n//         return \"both\";\n//     } else if (contentMetricsLeft < containerMetricsLeft) {\n//         return \"left\";\n//     } else if (contentMetricsRight > containerMetricsRight) {\n//         return \"right\";\n//     } else {\n//         return \"none\";\n//     }\n// }\n\n// /**\n//  * @fileoverview dragscroll - scroll area by dragging\n//  * @version 0.0.8\n//  * \n//  * @license MIT, see https://github.com/asvd/dragscroll\n//  * @copyright 2015 asvd <heliosframework@gmail.com> \n//  */\n\n\n// (function (root, factory) {\n//     if (typeof define === 'function' && define.amd) {\n//         define(['exports'], factory);\n//     } else if (typeof exports !== 'undefined') {\n//         factory(exports);\n//     } else {\n//         factory((root.dragscroll = {}));\n//     }\n// }(this, function (exports) {\n//     var _windowStore = window;\n//     var _documentStore = document;\n//     var mousemoveStore = 'mousemove';\n//     var mouseupStore  = 'mouseup';\n//     var mousedownStore  = 'mousedown';\n//     var EventListenerStore = 'EventListener';\n//     var addEventListenerStore  = 'add'+EventListenerStore;\n//     var removeEventListenerStore  = 'remove'+EventListenerStore;\n//     var newScrollXStore, newScrollYStore;\n\n//     var dragged = [];\n//     var resetStore = function(i, el) {\n//         for (i = 0; i < dragged.length;) {\n//             el = dragged[i++];\n//             el = el.container || el;\n//             el[removeEventListenerStore ](mousedownStore , el.md, 0);\n//             _windowStore[removeEventListenerStore ](mouseupStore , el.mu, 0);\n//             _windowStore[removeEventListenerStore ](mousemoveStore , el.mm, 0);\n//         }\n\n//         // cloning into array since HTMLCollection is updated dynamically\n//         dragged = [].slice.call(_documentStore.getElementsByClassName('dragscroll'));\n//         for (i = 0; i < dragged.length;) {\n//             (function(el, lastClientX, lastClientY, pushed, scroller, cont){\n//                 (cont = el.container || el)[addEventListenerStore ](\n//                     mousedownStore ,\n//                     cont.md = function(e) {\n//                         if (!el.hasAttribute('nochilddrag') ||\n//                             _documentStore.elementFromPoint(\n//                                 e.pageX, e.pageY\n//                             ) == cont\n//                         ) {\n//                             pushed = 1;\n//                             lastClientX = e.clientX;\n//                             lastClientY = e.clientY;\n\n//                             e.preventDefault();\n//                         }\n//                     }, 0\n//                 );\n\n//                 _windowStore[addEventListenerStore ](\n//                     mouseupStore , cont.mu = function() {pushed = 0;}, 0\n//                 );\n\n//                 _windowStore[addEventListenerStore ](\n//                     mousemoveStore ,\n//                     cont.mm = function(e) {\n//                         if (pushed) {\n//                             (scroller = el.scroller||el).scrollLeft -=\n//                                 newScrollXStore = (- lastClientX + (lastClientX=e.clientX));\n//                             scroller.scrollTop -=\n//                                 newScrollYStore = (- lastClientY + (lastClientY=e.clientY));\n//                             if (el == _documentStore.body) {\n//                                 (scroller = _documentStore.documentElement).scrollLeft -= newScrollXStore;\n//                                 scroller.scrollTop -= newScrollYStore;\n//                             }\n//                         }\n//                     }, 0\n//                 );\n//              })(dragged[i++]);\n//         }\n//     }\n\n      \n//     if (_documentStore.readyState == 'complete') {\n//         resetStore();\n//     } else {\n//         _windowStore[addEventListenerStore ]('load', resetStore, 0);\n//     }\n\n//     exports.resetStore = resetStore;\n// }));\n// }\n// }"]},"metadata":{},"sourceType":"module"}